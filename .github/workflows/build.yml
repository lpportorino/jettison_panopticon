name: Build Panopticon for NVIDIA Jetson Orin AGX

on:
  push:
    branches: [ main, master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:

jobs:
  build-jetson:
    name: Build for NVIDIA Jetson Orin AGX (ARM64)
    runs-on: ubuntu-22.04-arm

    # Skip workflow if commit message contains [skip ci]
    if: "!contains(github.event.head_commit.message, '[skip ci]')"

    strategy:
      matrix:
        python-version: ['3.12']

    permissions:
      contents: write  # Needed to push submodule updates

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Need full history for submodule updates

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Update Python bindings if needed
        id: update-bindings
        run: |
          echo "=== Checking Python Bindings ===="

          # Configure git for automated commits
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

          # Store the current commit for comparison
          cd c_data_python_bindings
          CURRENT_COMMIT=$(git rev-parse HEAD)
          cd ..

          # Fetch and merge latest changes
          git submodule update --remote --merge c_data_python_bindings

          # Check if submodule was updated
          cd c_data_python_bindings
          NEW_COMMIT=$(git rev-parse HEAD)
          cd ..

          if [ "$CURRENT_COMMIT" != "$NEW_COMMIT" ]; then
            echo "✅ Bindings were updated from $CURRENT_COMMIT to $NEW_COMMIT"

            # Commit the update with [skip ci] to prevent recursive builds
            git add c_data_python_bindings
            git commit -m "chore: Update Python bindings submodule [skip ci]"$'\n\n'"Auto-updated by CI build process to ensure latest bindings are used."$'\n'"This commit was automatically generated."

            # Push the update
            git push origin HEAD:${GITHUB_REF#refs/heads/}

            echo "✅ Pushed binding updates with [skip ci] tag"
            echo "bindings_updated=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Bindings are already up-to-date"
            echo "bindings_updated=false" >> $GITHUB_OUTPUT
          fi

      - name: Install latest LLVM/Clang
        run: |
          # Install latest LLVM/Clang using the official script
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh 21

          # Set Clang 21 as the default
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-21 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-21 100
          sudo update-alternatives --install /usr/bin/cc cc /usr/bin/clang-21 100
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-21 100

          # Set as default cc/c++ as well
          sudo update-alternatives --set cc /usr/bin/clang-21
          sudo update-alternatives --set c++ /usr/bin/clang++-21
          sudo update-alternatives --set clang /usr/bin/clang-21
          sudo update-alternatives --set clang++ /usr/bin/clang++-21

          # Verify it's the default
          echo "=== Verifying Clang 21 is default ==="
          which clang
          clang --version
          which cc
          cc --version

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ccache \
            patchelf \
            build-essential \
            libssl-dev \
            libffi-dev \
            python3-dev

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt

      - name: Build with Nuitka for Jetson
        env:
          CC: clang
          CXX: clang++
          # Optimize for Cortex-A78AE found in Jetson Orin
          CFLAGS: -O3 -march=armv8.2-a+crypto+fp16+rcpc+dotprod -flto=thin -ffast-math
          CXXFLAGS: -O3 -march=armv8.2-a+crypto+fp16+rcpc+dotprod -flto=thin -ffast-math
          LDFLAGS: -flto=thin
        run: |
          echo "Building for NVIDIA Jetson Orin AGX (Cortex-A78AE)"
          make build-ci

      - name: Verify built binary
        run: |
          echo "Binary built successfully:"
          ls -lh ./dist/panopticon
          file ./dist/panopticon

      - name: Create artifact name
        id: artifact
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=${GITHUB_SHA::8}
          fi
          echo "name=panopticon-jetson-orin-${VERSION}" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.name }}
          path: dist/panopticon
          retention-days: 30

      - name: Create Release (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: dist/panopticon
          generate_release_notes: true
          name: Panopticon for NVIDIA Jetson Orin AGX - ${{ github.ref_name }}
          body: |
            ## NVIDIA Jetson Orin AGX Release

            This binary is specifically built and optimized for:
            - **Platform**: NVIDIA Jetson Orin AGX 32GB
            - **Architecture**: ARM64 (aarch64)
            - **CPU**: Cortex-A78AE with NEON/Crypto extensions
            - **Optimization**: -O3 with LTO and ARM-specific optimizations

            **Note**: This binary will NOT run on other ARM64 platforms.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}